import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup
import matplotlib
from datetime import datetime, timedelta
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import io
import json
import re
import google.generativeai as genai
import threading

TOKEN = 'APITOKENBOT'
bot = telebot.TeleBot(TOKEN)
startMes = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –≤–∞—à–µ–º—É –Ω–∞–¥–µ–∂–Ω–æ–º—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É!\n–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\nüîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã\nüîπ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –±—é–¥–∂–µ—Ç\nüîπ –°—Ç–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫–æ –º–Ω–µ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã!'
url = "https://ru.investing.com/currencies/usd-rub"
doll = requests.get(url)
url1 = 'https://ru.investing.com/currencies/eur-rub'
eu = requests.get(url1)
url2 = 'https://ru.investing.com/currencies/gbp-rub'
fund = requests.get(url2)
url3 = 'https://ru.investing.com/currencies/cny-rub'
cny = requests.get(url3)
# Global dictionary to store user data (expenses, budgets, etc.)
courses = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=2)
fi = types.KeyboardButton('–§–∏–∞—Ç')
crip = types.KeyboardButton('–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞')
courses.add(fi,crip)
GEMINI_API_KEY = 'AIzaSyA8CDVJzTbLK-uwfSxxhdkP7vdFS6dC57g'  # –∫–ª—é—á API Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')
fiati = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=2)
dol = types.KeyboardButton('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞')
e = types.KeyboardButton('–ö—É—Ä—Å –µ–≤—Ä–æ')
fs = types.KeyboardButton('–ö—É—Ä—Å —Ñ—É–Ω—Ç–æ–≤ —Å—Ç–µ—Ä–ª–∏–Ω–≥–∞')
cn = types.KeyboardButton('–ö—É—Ä—Å —é–∞–Ω–µ–π')
fiati.add(dol,e,fs,cn)
MAX_MESSAGE_LENGTH = 4096
main = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=2)
itembtn1 = types.KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏")
itembtn2 = types.KeyboardButton("–í–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É")
itembtn3 = types.KeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
itembtn4 = types.KeyboardButton("–¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞—Ç")
main.add(itembtn1, itembtn2, itembtn3, itembtn4)

def load_user_data():
    try:
        with open('user_data.json', 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}
user_data = load_user_data()
print("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", user_data)
def save_user_data(user_data):
    with open('user_data.json', 'w') as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)
    print("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


def show_money_management_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    itembn1 = types.KeyboardButton("–ë–∞–ª–∞–Ω—Å")
    itembn2 = types.KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç")
    itembn3 = types.KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç")  
    itembn4 = types.KeyboardButton("–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å?")
    markup.add(itembn1, itembn2, itembn3, itembn4)
    bot.send_message(message.chat.id, "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

def convert_comma_to_dot(string):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏–∑ –∑–∞–ø—è—Ç–æ–π –≤ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ.
    """
    return string.replace(',', '.')

def safe_float_conversion(user_input):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π.
    """
    try:
        return float(convert_comma_to_dot(user_input))
    except ValueError:
        return None


@bot.message_handler(func=lambda message:message.text == '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
def cour(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–ª—é—Ç—ã', reply_markup=courses)

@bot.message_handler(func=lambda message:message.text == '–§–∏–∞—Ç')
def fiat(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É', reply_markup=fiati)

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
def ask_for_crypto_amount(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤:")
    bot.register_next_step_handler(msg, process_crypto_amount)

def process_crypto_amount(message):
    amount = safe_float_conversion(message.text)
    if (amount is not None) and (amount > 0):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∫–æ–∏–Ω–∞:")
        # –ü–µ—Ä–µ–¥–∞–µ–º amount –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        bot.register_next_step_handler(msg, calculate_crypto_value, amount)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

def calculate_crypto_value(message, amount):
    coin_value = safe_float_conversion(message.text)
    if (coin_value is not None) and (coin_value > 0):
        total_value = amount * coin_value
        bot.send_message(message.chat.id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f}", reply_markup=main)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∫–æ–∏–Ω–∞.")



def print_user_data_periodically():
    print("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ user_data:", user_data)
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤
    threading.Timer(6000, print_user_data_periodically).start()

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
print_user_data_periodically()

# Start command
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = str(message.chat.id)
    user_data_local = load_user_data()
    if chat_id not in user_data_local:
        user_data_local[chat_id] = {
            'total_amount': 0.0, 
            'spent': 0.0, 
            'expenses': [], 
            'categories': [], 
            'crypto_amount': 0.0, 
            'principal': 0.0, 
            'interest_rate': 0.0, 
            'days': 0,
            'daily_budget': 0.0
        }
        save_user_data(user_data_local)
    bot.send_message(chat_id, startMes, reply_markup=main)


    


def dollar(message):
    if doll.status_code == 200:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
        soup = BeautifulSoup(doll.text, 'html.parser')

        # –ù–∞—Ö–æ–¥–∏–º div —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
        div_element = soup.find('div', class_='text-5xl/9 font-bold md:text-[42px] md:leading-[60px] text-[#232526]')

        # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if div_element:
            bot.send_message(message.chat.id, f'1$ –°–®–ê = {div_element.text.strip()}‚ÇΩ', reply_markup=main)
    else:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {doll.status_code}", reply_markup=main)
def euro(message):
    if eu.status_code == 200:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
        soup = BeautifulSoup(eu.text, 'html.parser')

        # –ù–∞—Ö–æ–¥–∏–º div —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
        div_element = soup.find('div', class_='text-5xl/9 font-bold md:text-[42px] md:leading-[60px] text-[#232526]')

        # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if div_element:
            bot.send_message(message.chat.id, f'1‚Ç¨ = {div_element.text.strip()}‚ÇΩ', reply_markup=main)
    else:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {eu.status_code}", reply_markup=main)


def fund_sterling(message):
    if fund.status_code == 200:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
        soup = BeautifulSoup(fund.text, 'html.parser')

        # –ù–∞—Ö–æ–¥–∏–º div —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
        div_element = soup.find('div', class_='text-5xl/9 font-bold md:text-[42px] md:leading-[60px] text-[#232526]')

        # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if div_element:
            bot.send_message(message.chat.id, f'1¬£ –°—Ç–µ—Ä–ª–∏–Ω–≥–∞ = {div_element.text.strip()}‚ÇΩ', reply_markup=main)
    else:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {fund.status_code}", reply_markup=main)


def yani(message):
    if cny.status_code == 200:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
        soup = BeautifulSoup(cny.text, 'html.parser')

        # –ù–∞—Ö–æ–¥–∏–º div —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
        div_element = soup.find('div', class_='text-5xl/9 font-bold md:text-[42px] md:leading-[60px] text-[#232526]')

        # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if div_element:
            bot.send_message(message.chat.id, f'1¬• = {div_element.text.strip()}‚ÇΩ', reply_markup=main)
    else:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {cny.status_code}", reply_markup=main)



@bot.message_handler(func=lambda message: message.text == '–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞')
def kursd(message):
    dollar(message)

@bot.message_handler(func=lambda message: message.text == '–ö—É—Ä—Å –µ–≤—Ä–æ')
def kerse(message):
    euro(message)

@bot.message_handler(func=lambda message: message.text == '–ö—É—Ä—Å —Ñ—É–Ω—Ç–æ–≤ —Å—Ç–µ—Ä–ª–∏–Ω–≥–∞')
def kersfs(message):
    fund_sterling(message)

@bot.message_handler(func=lambda message: message.text == '–ö—É—Ä—Å —é–∞–Ω–µ–π')
def kersy(message):
    yani(message)

# Handler for 'Manage Money'
@bot.message_handler(func=lambda message: message.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç')
def ask_for_amount(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–∑–±–∏—Ç—å")
    bot.register_next_step_handler(msg, process_amount_step)

def process_amount_step(message):
    chat_id = str(message.chat.id)
    amount = safe_float_conversion(message.text)
    if amount is not None and amount > 0:
        user_data_local = load_user_data()  
        user_data_local[chat_id]['total_amount'] = amount
        save_user_data(user_data_local)  
        msg = bot.send_message(chat_id, "–ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å.")
        bot.register_next_step_handler(msg, process_days_step)
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


def process_days_step(message):
    chat_id = str(message.chat.id)
    days = safe_float_conversion(message.text)
    user_data_local = load_user_data()
    if days is not None and days > 0:
        user_data_local[chat_id]['days'] = days
        daily_budget = user_data_local[chat_id]['total_amount'] / days
        user_data_local[chat_id]['daily_budget'] = daily_budget
        save_user_data(user_data_local)  
        bot.send_message(chat_id, f"–í–∞—à –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: {daily_budget:.2f}‚ÇΩ", reply_markup=main)
    else:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.")



@bot.message_handler(func=lambda message: message.text == '–ë–∞–ª–∞–Ω—Å')
def show_balance(message):
    chat_id = str(message.chat.id)
    user_data_local = load_user_data()
    if chat_id in user_data_local and 'total_amount' in user_data_local[chat_id]:
        total_amount = user_data_local[chat_id]['total_amount']
        spent = user_data_local[chat_id].get('spent', 0)
        remaining = total_amount - spent
        days_left = user_data_local[chat_id].get('days', 1)
        daily_budget = remaining / days_left if days_left > 0 else 0
        user_data_local[chat_id]['daily_budget'] = daily_budget
        save_user_data(user_data_local)
        bot.send_message(chat_id, f"–û—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å: {remaining:.2f}‚ÇΩ\n–î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: {daily_budget:.2f}‚ÇΩ\n–î–Ω–µ–π: {days_left}", reply_markup=main)
    else:
        bot.send_message(chat_id, "–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç.", reply_markup=main)



@bot.message_handler(func=lambda message: message.text == '–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å?')
def how_to_spend(message):
    chat_id = str(message.chat.id)
    user_data_local = load_user_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if chat_id in user_data_local:
        user = user_data_local[chat_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'total_amount' –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        if 'total_amount' in user and user['total_amount'] != 0:
            bot.send_message(chat_id, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –ê–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–≤–æ–¥–∏—Ç –ò–ò, –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏")
            if user['total_amount'] < 0:
                # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ user –≤–º–µ—Å—Ç–æ user_data[chat_id] –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                response = model.generate_content(f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∂–µ—Å—Ç–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, —á—Ç–æ —Ç—ã –ø—Ä—è–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç –º–∏—Ä–∞.–Ø –∂–∏–≤—É –≤ –†–æ—Å—Å–∏–∏. –£ –º–µ–Ω—è –¥–æ–ª–≥ {user['total_amount']}. –ö–∞–∫ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –¥–æ–ª–≥–æ–º?")
                response_text = response.text
                response_text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', response_text)  # –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∞ <b>—Ç–µ–∫—Å—Ç</b>
                response_text = re.sub(r'\* (.*?)', r'üîπ \1', response_text)  # –ó–∞–º–µ–Ω–∞ * —Ç–µ–∫—Å—Ç –Ω–∞ üîπ —Ç–µ–∫—Å—Ç
                response_text = re.sub(r'\# (.*?)', r'‚ñ™Ô∏è \1', response_text)  # –ó–∞–º–µ–Ω–∞ # —Ç–µ–∫—Å—Ç –Ω–∞ ‚ñ™Ô∏è —Ç–µ–∫—Å—Ç
                response_text = re.sub(r'\`\`\`(.*?)\`\`\`', r'<code>\1</code>', response_text, flags=re.DOTALL)
                for i in range(0, len(response_text), MAX_MESSAGE_LENGTH): # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏—Ç—å –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    bot.send_message(chat_id, response_text[i:i+MAX_MESSAGE_LENGTH], parse_mode='HTML', reply_markup=main)
            elif user['total_amount'] > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ user –≤–º–µ—Å—Ç–æ user_data[chat_id] –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                response = model.generate_content(f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∂–µ—Å—Ç–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, —á—Ç–æ —Ç—ã –ø—Ä—è–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç –º–∏—Ä–∞.–Ø –∂–∏–≤—É –≤ –†–æ—Å—Å–∏–∏. –£ –º–µ–Ω—è –µ—Å—Ç—å {user['total_amount']} –Ω–∞ {user['days']} –¥–Ω–µ–π, —Ç–æ –µ—Å—Ç—å {user['total_amount']/user['days']}. –ö–∞–∫ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ–±—ã –µ—â–µ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∫–æ–Ω—Ü–µ —Å—Ä–æ–∫–∞?")
                response_text = response.text
                response_text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', response_text)  # –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∞ <b>—Ç–µ–∫—Å—Ç</b>
                response_text = re.sub(r'\* (.*?)', r'üîπ \1', response_text)  # –ó–∞–º–µ–Ω–∞ * —Ç–µ–∫—Å—Ç –Ω–∞ üîπ —Ç–µ–∫—Å—Ç
                response_text = re.sub(r'\# (.*?)', r'‚ñ™Ô∏è \1', response_text)  # –ó–∞–º–µ–Ω–∞ # —Ç–µ–∫—Å—Ç –Ω–∞ ‚ñ™Ô∏è —Ç–µ–∫—Å—Ç
                response_text = re.sub(r'\`\`\`(.*?)\`\`\`', r'<code>\1</code>', response_text, flags=re.DOTALL)
                for i in range(0, len(response_text), MAX_MESSAGE_LENGTH): # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏—Ç—å –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    bot.send_message(chat_id, response_text[i:i+MAX_MESSAGE_LENGTH], parse_mode='HTML', reply_markup=main)
        else:
            bot.send_message(chat_id, "–í–∞—à –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç–æ–π", reply_markup=main)
    else:
        bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", reply_markup=main)


@bot.message_handler(func=lambda message: message.text == "–í–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É")
def initiate_expense_entry(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    bot.register_next_step_handler(msg, process_expense_amount)


def show_categories(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤):")
    bot.register_next_step_handler(msg, process_expense_category)


def process_expense_amount(message):
    chat_id = str(message.chat.id)
    amount = safe_float_conversion(message.text)
    if amount is not None:
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:")
        bot.register_next_step_handler(msg, process_expense_category, amount)
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")


def process_expense_category(message, amount):
    chat_id = str(message.chat.id)
    category = message.text.strip()
    
    user_data_local = load_user_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –±—ã–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if chat_id not in user_data_local:
        user_data_local[chat_id] = {
            'total_amount': 0.0, 
            'spent': 0.0, 
            'expenses': [], 
            'categories': [], 
            'crypto_amount': 0.0, 
            'principal': 0.0, 
            'interest_rate': 0.0, 
            'days': 0,
            'daily_budget': 0.0
        }

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞—Ç–µ
    user_data_local[chat_id]['total_amount'] -= amount
    user_data_local[chat_id]['expenses'].append({'category': category, 'amount': amount})

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç
    days_left = max(user_data_local[chat_id].get('days', 1), 1)  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    if days_left > 0 and user_data_local[chat_id]['total_amount'] > 0:
        new_daily_budget = user_data_local[chat_id]['total_amount'] / days_left
    else:
        new_daily_budget = 0
    user_data_local[chat_id]['daily_budget'] = new_daily_budget

    save_user_data(user_data_local)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    bot.send_message(chat_id, f"–†–∞—Å—Ö–æ–¥ {amount}‚ÇΩ –Ω–∞ '{category}' –¥–æ–±–∞–≤–ª–µ–Ω. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data_local[chat_id]['total_amount']:.2f}‚ÇΩ\n–î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: {new_daily_budget:.2f}‚ÇΩ", reply_markup=main)


def generate_expense_chart_and_summary(chat_id):
    summary_text = "–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    if 'expenses' in user_data[chat_id] and user_data[chat_id]['expenses']:
        categories = {}
        for expense in user_data[chat_id]['expenses']:
            categories[expense['category']] = categories.get(expense['category'], 0) + expense['amount']
        
        for category, amount in categories.items():
            summary_text += f"{category} - {amount:.2f}\n"
        
        fig, ax = plt.subplots()
        ax.pie(categories.values(), labels=categories.keys(), autopct='%1.1f%%', startangle=90)
        ax.axis('equal')  # –î–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)  # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Ñ–∏–≥—É—Ä—ã
        return buf, summary_text
    else:
        return None, summary_text.rstrip()


def get_crypto_price(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    price_container = soup.find('div', class_='sc-f70bb44c-0 flfGQp flexStart alignBaseline')
    price = price_container.find('span', class_='sc-f70bb44c-0 jxpCgO base-text').text
    return price


@bot.message_handler(func=lambda message: message.text == "–¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞—Ç")
def display_expenses(message):
    chat_id = str(message.chat.id)
    user_data_local = load_user_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    if chat_id in user_data_local and 'expenses' in user_data_local[chat_id] and user_data_local[chat_id]['expenses']:
        expenses = user_data_local[chat_id]['expenses']
        
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        categories = [expense['category'] for expense in expenses]
        amounts = [expense['amount'] for expense in expenses]
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        fig, ax = plt.subplots()
        ax.pie(amounts, labels=categories, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ –ø–∞–º—è—Ç—å
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_photo(chat_id, photo=buf)
        
        plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å

    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, "–†–∞—Å—Ö–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–í–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=main)
@bot.message_handler(func=lambda message: message.text == "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞")
def show_crypto_options(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    cryptos = ["Bitcoin", "Ethereum", "Tether USDt", "Solana", "BNB", "XRP", "USDC", "Cardano", "Avalanche", "Dogecoin", "Chainlink", "Tron", "Polkadot", "Polygon", "Toncoin"]
    for crypto in cryptos:
        markup.add(types.KeyboardButton(crypto))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["Bitcoin", "Ethereum", "Tether USDt", "Solana", "BNB", "XRP", "USDC", "Cardano", "Avalanche", "Dogecoin", "Chainlink", "Tron", "Polkadot", "Polygon", "Toncoin"])
def crypto_price(message):
    crypto_urls = {
        "Bitcoin": "https://coinmarketcap.com/currencies/bitcoin/",
        "Ethereum": "https://coinmarketcap.com/currencies/ethereum/",
        "Tether USDt": 'https://coinmarketcap.com/currencies/tether/',
        "Solana": "https://coinmarketcap.com/currencies/solana/",
        "BNB": "https://coinmarketcap.com/currencies/bnb/",
        "XRP": "https://coinmarketcap.com/currencies/xrp/",
        "USDC": "https://coinmarketcap.com/currencies/usd-coin/",
        "Cardano": "https://coinmarketcap.com/currencies/cardano/",
        "Avalanche": "https://coinmarketcap.com/currencies/avalanche/",
        "Dogecoin": "https://coinmarketcap.com/currencies/dogecoin/",
        "Chainlink": "https://coinmarketcap.com/currencies/chainlink/",
        "Tron": "https://coinmarketcap.com/currencies/tron/",
        "Polkadot": "https://coinmarketcap.com/currencies/polkadot-new/",
        "Polygon": "https://coinmarketcap.com/currencies/polygon/",
        "Toncoin": "https://coinmarketcap.com/currencies/toncoin/",
    }
    if message.text in crypto_urls:
        price = get_crypto_price(crypto_urls[message.text])
        bot.send_message(message.chat.id, f"1{message.text} = <b>{price}$</b>", reply_markup=main, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç")
def ask_for_principal(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:")
    bot.register_next_step_handler(msg, process_principal_step)

def decrement_days():
    user_data = load_user_data()
    for user_id, data in user_data.items():
        if data['days'] > 0:
            data['days'] -= 1
            # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            # –ù–∞–ø—Ä–∏–º–µ—Ä:
            # if data['days'] > 0:
            #     data['daily_budget'] = data['total_amount'] / data['days']
            # else:
            #     data['daily_budget'] = 0
    save_user_data(user_data)
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    threading.Timer(86400, decrement_days).start()

def ensure_user_data_initialized(chat_id):
    if str(chat_id) not in user_data:
        user_data[str(chat_id)] = {
            'total_amount': 0.0, 
            'spent': 0.0, 
            'expenses': [], 
            'categories': [], 
            'crypto_amount': 0.0, 
            'principal': 0.0, 
            'interest_rate': 0, 
            'days': 0,
            'daily_budget': 0.0,
            'years': 0
        }
        save_user_data()

def process_principal_step(message):
    principal = safe_float_conversion(message.text)
    if principal is not None and principal > 0:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç:")
        # –ü–µ—Ä–µ–¥–∞–µ–º principal –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        bot.register_next_step_handler(msg, process_interest_rate_step, principal)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

def process_interest_rate_step(message, principal):
    interest_rate = safe_float_conversion(message.text)
    if interest_rate is not None and interest_rate > 0:
        msg = bot.send_message(message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã–¥–∞–Ω –∫—Ä–µ–¥–∏—Ç?")
        # –ü–µ—Ä–µ–¥–∞–µ–º principal –∏ interest_rate –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        bot.register_next_step_handler(msg, process_years_step, principal, interest_rate)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.")

def process_years_step(message, principal, interest_rate):
    years = safe_float_conversion(message.text)
    if years is not None and years > 0:
        total_amount = principal * (1 + interest_rate / 100) ** years
        bot.send_message(message.chat.id, f"–ß–µ—Ä–µ–∑ {years} –ª–µ—Ç(–≥–æ–¥–∞) –≤—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å: {total_amount:.2f}")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç.")


@bot.message_handler(func=lambda message: message.text in ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏", "–í–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É", "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", "–¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞—Ç"])
def handle_menu_options(message):
    if message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏":
        show_money_management_menu(message)

decrement_days()
if __name__ == '__main__':
    bot.infinity_polling()
